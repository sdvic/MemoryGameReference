{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 LucidaGrande;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green11\blue235;}
\margl1440\margr1440\vieww26740\viewh26160\viewkind0
\deftab720

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth18880\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sa420\ql\qnatural

\f0\b\fs64 \cf0 Threading with Swing (ctd):
\f1 \uc0\u8232 
\f0 SwingUtilities.invokeLater()\
\pard\intbl\itap1\pardeftab720\sa320\ql\qnatural

\b0\fs32 \cf0 In our introduction to {\field{\*\fldinst{HYPERLINK "file:///Users/george/Desktop/swing_ui.shtml"}}{\fldrslt \cf2 \ul \ulc2 threading with Swing}}, we said that any updates to the user interface must happen on the 
\b event dispatch thread
\b0 . So from any other thread\'97 in practice, that means code that 
\i isn't
\i0  called directly from an event handler\'97 we must specifically arrange for our GUI update code, and generally 
\i only
\i0  that code, to be called on the event dispatch thread.\
So, supposing we have a button that launches a series of database queries. We dutifully start up a new thread so that our queries won't block the user interface:\
\pard\intbl\itap1\pardeftab720\ql\qnatural

\f2\fs26 \cf0 JButton b = new JButton("Run query");\
b.addActionListener(new ActionListener() \{\
  public void actionPerformed(ActionEvent e) \{\
    Thread queryThread = new Thread() \{\
      public void run() \{\
        
\f3\b runQueries();
\f2\b0 \
      \}\
    \};\
    
\f3\b queryThread.start();
\f2\b0 \
  \}\
\});\
\pard\intbl\itap1\pardeftab720\sa320\ql\qnatural

\f0\fs32 \cf0 That was the easy bit. But now, from our query thread, we want to update a progress bar or some other component showing the current progress to the user. How can we do this if we're no longer in the event dispatch thread? Well, the 
\f2\fs26 SwingUtilities
\f0\fs32  class, which provides various useful little calls, includes a method called 
\f2\fs26 invokeLater()
\f0\fs32 . This method allows us to post a "job" to Swing, which it will then run on the event dispatch thread at its next convenience. So here is how to use 
\f2\fs26 SwingUtilities.invokeLater()
\f0\fs32  from out 
\f2\fs26 runQueries
\f0\fs32  method:\
\pard\intbl\itap1\pardeftab720\ql\qnatural

\f2\fs26 \cf0 // Called from non-UI thread\
private void runQueries() \{\
  for (int i = 0; i < noQueries; i++) \{\
    runDatabaseQuery(i);\
    updateProgress(i);\
  \}\
\}\
\
private void updateProgress(final int queryNo) \{\
  
\f3\b SwingUtilities.invokeLater(new Runnable() \{
\f2\b0 \
    public void run() \{\
      
\f3\b // Here, we can safely update the GUI\
      // because we'll be called from the\
      // event dispatch thread\
      statusLabel.setText("Query: " + queryNo);
\f2\b0 \
    \}\
  \});\
\}\
\pard\intbl\itap1\pardeftab720\sa320\ql\qnatural

\f0\fs32 \cf0 Here, 
\f2\fs26 statusLabel
\f0\fs32  would be a JLabel or JTextField or something of that ilk\'97 it doesn't matter terribly much. The point is: whatever GUI component it is, we must make sure that the code to update it is inside a call to 
\f2\fs26 invokeLater()
\f0\fs32 .\
There's a bit of awkward syntax that we've glossed over, but which it's important to get used to for Swing programming generally. Essentially, we use an {\field{\*\fldinst{HYPERLINK "file:///Users/george/swing/anonymous_inner_classes.shtml"}}{\fldrslt 
\b \cf2 \ul \ulc2 anonumous inner class}} to define our "job"\'97 more specifically, an implementation of the 
\f2\fs26 Runnable
\f0\fs32  interface. Anonymous inner classes are a bit of syntactic shortcut. We could also have written something like:\
\pard\intbl\itap1\pardeftab720\ql\qnatural

\f2\fs26 \cf0 class UpdateJob implements Runnable \{\
  private final String progress;\
  UpdateJob(String progress) \{\
    this.progress = progress;\
  \}\
  public void run() \{\
    statusLabel.setText(progress);\
  \}\
\}\
...\
Runnable task = new UpdateJob("Query: " + i);\
SwingUtilities.invokeLater(task);\
\pard\intbl\itap1\pardeftab720\sa320\ql\qnatural

\f0\fs32 \cf0 But usually, it's a bit tedious to have to write a separate class definition for every pattern of update job. (Note that either way, they still 
\i compile
\i0  to a different class.)\
\pard\intbl\itap1\pardeftab720\sa380\ql\qnatural

\b\fs48 \cf0 Application startup code\
\pard\intbl\itap1\pardeftab720\sa320\ql\qnatural

\b0\fs32 \cf0 There's one place where it's very easy to forget that we need 
\f2\fs26 SwingUtilities.invokeLater()
\f0\fs32 , and that's on application startup. Our applications 
\f2\fs26 main()
\f0\fs32  method will always be called by a special "main" thread that the VM starts up for us. And this main thread is 
\i not
\i0  the event dispatch thread! So:\
\pard\intbl\itap1\pardeftab720\ql\qnatural
\cf0 The 
\b code that 
\i initialises
\i0  our GUI must also take place in an 
\f3\fs26 invokeLater()
\f0\b0\fs32 .\
\pard\intbl\itap1\pardeftab720\sa320\ql\qnatural
\cf0 So our initial 
\f2\fs26 main()
\f0\fs32  method should look something like this:\
\pard\intbl\itap1\pardeftab720\ql\qnatural

\f2\fs26 \cf0 public class MyApplication extends JFrame \{\
\
  public static void main(String[] args) \{\
    
\f3\b SwingUtilities.invokeLater(new Runnable() \{
\f2\b0 \
      public void run() \{\
        MyApplication app = new MyApplication();\
        app.setVisible(true);\
      \}\
    \});\
  \}\
\
  private MyApplication() \{\
    // create UI here: add buttons, actions etc\
  \}\
\}\cell \lastrow\row
}